<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.readbook.readbookbackend.mapper.BookMapper">

    <resultMap id="OneBookResultMap" type="com.readbook.readbookbackend.pojo.OneBook">
        <id property="id" column="book_id" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="heat" column="heat" />
        <result property="createdTime" column="created_time" />
        <result property="updatedTime" column="updated_time" />
        <result property="creatorId" column="creator_id" />
        <result property="author" column="author" />
        <result property="value" column="value" />
    </resultMap>

    <!-- 插入语句：插入新图书 -->
    <!-- 插入语句：插入新图书 -->
    <insert id="insertNewBook">
        INSERT INTO book (title, content, heat, created_time, updated_time, creator_id, value, author)
        VALUES (#{title}, #{content}, #{heat}, #{createdTime}, #{updatedTime}, #{creatorId}, #{value}, #{author})
        <!-- 使用selectKey获取插入后生成的主键值并设置给book.id -->
        <selectKey keyProperty="id" resultType="java.math.BigInteger" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <insert id="insertOwnShip">
        INSERT INTO user_book_ownership_relationship (user_id, book_id)
        VALUES (#{userId}, #{bookId})
    </insert>

    <update id="updateBook">
        UPDATE book SET title = #{title}, content = #{content}, heat = #{heat},
                        updated_time = #{updatedTime}, value = #{value},
                        author = #{author} WHERE book_id = #{id}
    </update>


    <!-- 查询语句：根据作者、需要的类别和热度条件查找图书以及每个图书的所有类别 -->
    <select id="getBookByAuthorAndNeedCatesAndHeat" resultMap="OneBookResultMap">
        SELECT
        b.*
        FROM
        book b
        <where>
            <!-- 根据authorId参数判断是否添加作者筛选条件 -->
            <if test="authorId!= null">
                b.creator_id = #{authorId}
            </if>
            <!-- 根据heatRequire参数判断是否添加热度筛选条件 -->
            <if test="heatRequire!= null">
                AND b.heat >= #{heatRequire}
            </if>
            <!-- 根据needCates参数判断是否添加类别筛选条件 -->
            <if test="cateSelectedIds!= null and cateSelectedIds.size() > 0">
                AND b.book_id IN
                <foreach collection="cateSelectedIds" item="cateId" open="(" separator="," close=")">
                    #{cateId}
                </foreach>
            </if>
        </where>
        ORDER BY b.heat DESC
    </select>

    <!-- 查询语句：根据bookId查询图书 -->
    <select id="getBookById" resultMap="OneBookResultMap">
        SELECT * FROM book WHERE book_id = #{id}
    </select>

    <select id="getBookByTitle" resultMap="OneBookResultMap">
        SELECT * FROM book WHERE title = #{title}
    </select>

    <select id="findCategoriesByBookId" resultMap="categoryResultMap">
        SELECT c.category_id as id, c.cate_name as cateName, c.reference_number as referenceNumber
        FROM category c
                 JOIN book_category_relationship bcr ON c.category_id = bcr.cate_id
        WHERE bcr.book_id = #{bookId}
    </select>

    <select id="getAllBooks" resultMap="OneBookResultMap">
        SELECT * FROM book where true
    </select>

    <select id="getBookByAuthorId" resultMap="OneBookResultMap">
        SELECT * FROM book WHERE creator_id = #{authorId}
    </select>

    <resultMap id="categoryResultMap" type="com.readbook.readbookbackend.pojo.Category">
        <id property="id" column="id"/>
        <result property="cateName" column="cateName"/>
        <result property="referenceNumber" column="referenceNumber"/>
    </resultMap>

    <insert id="banBook" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO ban_books (book_id, reason)
        VALUES (#{bookId}, #{reason})
    </insert>

    <delete id="deleteBanBook">
        DELETE FROM ban_books WHERE book_id = #{bookId}
    </delete>
</mapper>